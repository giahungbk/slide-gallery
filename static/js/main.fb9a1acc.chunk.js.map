{"version":3,"sources":["image/img1.jpg","image/img2.jpg","image/img3.jpg","image/img4.jpg","image/img5.jpg","image/img6.jpg","components/SlideShow/SlideshowGallery.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SlideshowGallery","props","state","slideIndex","containerElm","createRef","containerBottomElm","ratioWHArray","ratio","split","ratioWH","backward","bind","forward","setSlideIndex","getNewSlideIndex","updateDimensions","runAutomatic","step","this","numberSlide","input","length","newSlideIndex","setState","index","current","style","height","offsetWidth","window","addEventListener","mode","timeout","automaticInterval","setInterval","Number","parseInt","removeEventListener","clearInterval","className","ref","map","image","key","src","alt","caption","onClick","width","React","Component","collection","Img1","Img2","Img3","Img4","Img5","Img6","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fb9a1acc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/img1.e5aca032.jpg\";","module.exports = __webpack_public_path__ + \"static/media/img2.eea3e601.jpg\";","module.exports = __webpack_public_path__ + \"static/media/img3.83902969.jpg\";","module.exports = __webpack_public_path__ + \"static/media/img4.855fbb9d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/img5.d0a8c8ed.jpg\";","module.exports = __webpack_public_path__ + \"static/media/img6.64d6d3ca.jpg\";","import React, { createRef } from 'react';\r\n\r\nimport './SlideshowGallery.css';\r\n\r\nexport default class SlideshowGallery extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      slideIndex: 0\r\n    };\r\n\r\n    this.containerElm = createRef();\r\n    this.containerBottomElm = createRef();\r\n\r\n    const ratioWHArray = this.props.ratio.split(\":\");\r\n    this.ratioWH = ratioWHArray[0] / ratioWHArray[1];\r\n\r\n    this.backward = this.backward.bind(this);\r\n    this.forward = this.forward.bind(this);\r\n    this.setSlideIndex = this.setSlideIndex.bind(this);\r\n    this.getNewSlideIndex = this.getNewSlideIndex.bind(this);\r\n    this.updateDimensions = this.updateDimensions.bind(this);\r\n    this.runAutomatic = this.runAutomatic.bind(this);\r\n  }\r\n\r\n  getNewSlideIndex(step) {\r\n    const slideIndex = this.state.slideIndex;\r\n    const numberSlide = this.props.input.length;\r\n\r\n    let newSlideIndex = slideIndex + step;\r\n\r\n    if (newSlideIndex >= numberSlide) newSlideIndex = 0;\r\n    else if (newSlideIndex < 0) newSlideIndex = numberSlide - 1;\r\n\r\n    return newSlideIndex;\r\n  }\r\n\r\n  backward() {\r\n    this.setState({\r\n      slideIndex: this.getNewSlideIndex(-1)\r\n    });\r\n  }\r\n\r\n  forward() {\r\n    this.setState({\r\n      slideIndex: this.getNewSlideIndex(1)\r\n    });\r\n  }\r\n\r\n  setSlideIndex(index) {\r\n    this.setState({\r\n      slideIndex: index\r\n    })\r\n  }\r\n\r\n  updateDimensions() {\r\n    this.containerElm.current.style.height = `${this.containerElm.current.offsetWidth / this.ratioWH}px`;\r\n    this.containerBottomElm.current.style.height = `${this.containerBottomElm.current.offsetWidth / this.props.input.length / this.ratioWH}px`;\r\n  }\r\n\r\n  runAutomatic() {\r\n    this.setState({\r\n      slideIndex: this.getNewSlideIndex(1)\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.updateDimensions();\r\n    window.addEventListener(\"resize\", this.updateDimensions);\r\n\r\n    if (this.props.mode === \"automatic\") {\r\n      const timeout = this.props.timeout || 5000;\r\n\r\n      this.automaticInterval = setInterval(\r\n        () => this.runAutomatic(),\r\n        Number.parseInt(timeout)\r\n      );\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"resize\", this.updateDimensions);\r\n    if (this.automaticInterval) clearInterval(this.automaticInterval);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"lp-slideshow-gallery\">\r\n        <div className=\"container\" ref={this.containerElm}>\r\n          {\r\n            this.props.input.map((image, index) => {\r\n              return (\r\n                <div\r\n                  key={index}\r\n                  className={\r\n                    `slide ${this.state.slideIndex === index ? \"active\" : \"\"}`\r\n                  }\r\n                >\r\n                  <div className=\"number-text\">\r\n                    {`${index + 1} / ${this.props.input.length}`}\r\n                  </div>\r\n                  <img className=\"image\" src={image.src} alt={image.caption} />\r\n                  <div className=\"caption-text\">{image.caption}</div>\r\n                </div>\r\n              )\r\n            })\r\n          }\r\n\r\n          <span className=\"prev\" onClick={this.backward}>❮</span>\r\n          <span className=\"next\" onClick={this.forward}>❯</span>\r\n        </div>\r\n\r\n        <div className=\"container-bottom\" ref={this.containerBottomElm}>\r\n          {\r\n            this.props.input.map((image, index) => {\r\n              return (\r\n                <img\r\n                  key={index}\r\n                  src={image.src}\r\n                  alt={image.caption}\r\n                  className={\r\n                    `image ${this.state.slideIndex === index ? \"active\" : \"\"}`\r\n                  }\r\n                  onClick={() => this.setSlideIndex(index)}\r\n                  style={{\r\n                    width: `${1 / this.props.input.length * 100}%`,\r\n                    height: `100%`\r\n                  }}\r\n                />\r\n              )\r\n            })\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\n\nimport SlideshowGallery from './components/SlideShow/SlideshowGallery'\n\nimport Img1 from './image/img1.jpg'\nimport Img2 from './image/img2.jpg'\nimport Img3 from './image/img3.jpg'\nimport Img4 from './image/img4.jpg'\nimport Img5 from './image/img5.jpg'\nimport Img6 from './image/img6.jpg'\n\nimport './App.css';\n\nconst collection = [\n  { src: Img1, caption: \"Caption one\" },\n  { src: Img2, caption: \"Caption two\" },\n  { src: Img3, caption: \"Caption three\" },\n  { src: Img4, caption: \"Caption four\" },\n  { src: Img5, caption: \"Caption five\" },\n  { src: Img6, caption: \"Caption six\" },\n];\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SlideshowGallery\n          input={collection}\n          ratio={`3:2`}\n          mode={`manual`}\n        />\n\n        <SlideshowGallery\n          input={collection}\n          ratio={`3:2`}\n          mode={`automatic`}\n          timeout={`3000`}\n        />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}